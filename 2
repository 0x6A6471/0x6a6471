import Icon from "@/components/ui/icon";
import { useRef, useState } from "react";
import * as Dialog from "@radix-ui/react-dialog";
import { motion, AnimatePresence } from "framer-motion";
import { type Book } from "@/types/book";

type Props = {
	book: Book;
};

const overlayVariants = {
	initial: { opacity: 0 },
	animate: { opacity: 1 },
	exit: { opacity: 0 },
	transition: { duration: 0.2 },
};

export default function BookItem({ book }: Props) {
	const [isOpen, setIsOpen] = useState(false);
	const itemRef = useRef<HTMLButtonElement | null>(null);

	const getItemPosition = () => {
		if (!itemRef.current) return { top: 0, left: 0 };
		const rect = itemRef.current.getBoundingClientRect();
		const scaleY = rect.height / window.innerHeight;
		return {
			top: rect.top + rect.height / 2,
			left: rect.left + rect.width / 2,
			scaleY,
		};
	};

	return (
		<Dialog.Root open={isOpen} onOpenChange={setIsOpen}>
			<Dialog.Trigger asChild ref={itemRef}>
				<button
					className={`hover:-translate-y-0.5 transform transition-transform duration-300 ease-in-out w-full p-4 bg-gray-950 rounded-lg text-left focus:outline-none ${
						isOpen ? "invisible" : ""
					}`}
				>
					<p className="truncate text-gray-50">{book.title}</p>
					<p className="text-gray-400 text-sm mt-2">{book.creator}</p>
				</button>
			</Dialog.Trigger>

			<AnimatePresence>
				{isOpen && (
					<Dialog.Portal forceMount>
						<motion.div
							variants={overlayVariants}
							initial="initial"
							animate="animate"
							exit="exit"
							className="fixed inset-0 bg-black bg-opacity-80 backdrop-blur-sm"
						/>

						<Dialog.Content
							className="fixed inset-0 flex items-center justify-center"
							forceMount
						>
							<motion.div
								initial={{
									position: "fixed",
									top: getItemPosition().top,
									left: getItemPosition().left,
									x: "-50%",
									y: "-50%",
									scale: 0.2,
									opacity: 0,
								}}
								animate={{
									top: "50%",
									left: "50%",
									scale: 1,
									opacity: 1,
								}}
								exit={{
									top: getItemPosition().top,
									left: getItemPosition().left,
									scale: 0.2,
									opacity: 0,
								}}
								transition={{
									type: "spring",
									damping: 25,
									stiffness: 300,
								}}
								className="w-[90vw] max-w-lg h-fit max-h-[80vh] rounded-lg bg-gray-950 overflow-hidden z-20 p-8"
							>
								<Dialog.Title className="m-0 text-[17px] font-medium text-mauve12">
									{book.title}
								</Dialog.Title>
								<Dialog.Description className="mb-5 mt-2.5 text-[15px] leading-normal text-mauve11">
									{book.description}
								</Dialog.Description>
								<div className="mt-[25px] flex justify-end">
									<Dialog.Close asChild>
										<button className="inline-flex h-[35px] items-center justify-center rounded bg-green4 px-[15px] font-medium leading-none text-green11 hover:bg-green5 focus:shadow-[0_0_0_2px] focus:shadow-green7 focus:outline-none">
											Save changes
										</button>
									</Dialog.Close>
								</div>
								<Dialog.Close asChild>
									<button
										className="absolute right-2.5 top-2.5 p-1 rounded-md text-gray-800 focus:outline-none"
										aria-label="Close"
									>
										<Icon name="x" />
									</button>
								</Dialog.Close>
							</motion.div>
						</Dialog.Content>
					</Dialog.Portal>
				)}
			</AnimatePresence>
		</Dialog.Root>
	);
}
