generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets   = ["native"]
}

datasource db {
  provider          = "mysql"
  url               = env("PLANETSCALE_PRISMA_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model User {
  id            String     @id @default(cuid())
  name          String?    @db.VarChar(255)
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @map("updated_at")
  Bookmark      Bookmark[]
  Food          Food[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Bookmark {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  description String   @db.VarChar(255)
  link        String   @db.VarChar(255)
  type        String   @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id])

  @@map("bookmarks")
}

model Food {
  id             String   @id @default(cuid())
  restaurantName String   @map("restaurant_name") @db.VarChar(255)
  jakeRating     Float    @map("jake_rating") @db.Float
  jenRating      Float    @map("jen_rating") @db.Float
  link           String   @db.VarChar(255)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  userId         String   @map("user_id")
  image          String
  user           User     @relation(fields: [userId], references: [id])

  @@map("food")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
