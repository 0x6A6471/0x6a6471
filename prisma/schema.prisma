// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets   = ["native"]
}

datasource db {
  provider             = "mysql"
  url                  = env("PLANETSCALE_PRISMA_DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id            String     @id @default(cuid())
  name          String?    @db.VarChar(255)
  email         String?    @unique
  emailVerified DateTime?  @map(name: "email_verified")
  image         String?
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @default(now()) @map(name: "updated_at")
  Bookmark      Bookmark[]
  Food          Food[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model Bookmark {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  description String   @db.VarChar(255)
  link        String   @db.VarChar(255)
  type        String   @db.VarChar(255)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map(name: "user_id")

  @@map(name: "bookmarks")
}

model Food {
  id             String   @id @default(cuid())
  restaurantName String   @map(name: "restaurant_name") @db.VarChar(255)
  jakeRating     Float    @map(name: "jake_rating") @db.Float
  jenRating      Float    @map(name: "jen_rating") @db.Float
  link           String   @db.VarChar(255)
  image          String
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @map(name: "updated_at")
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @map(name: "user_id")

  @@map(name: "food")
}

// Next auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
